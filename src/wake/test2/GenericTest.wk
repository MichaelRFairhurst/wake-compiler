#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# GenericTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;
import SimpleGeneric;

@TestClass
every GenericTest is:

	needs
		numText SimpleGeneric{Num, Text},
		textNum SimpleGeneric{Text, Num},
		nested SimpleGeneric{SimpleGeneric{Num, Text}, SimpleGeneric{Text, Num}};

	@Test
	~[ test all start out as nothing in methods ]~ (Asserts) {
		Asserts.that(numText.getT1Optional() == nothing);
		Asserts.that(numText.getT2Optional() == nothing);
		Asserts.that(textNum.getT1Optional() == nothing);
		Asserts.that(textNum.getT2Optional() == nothing);
		Asserts.that(nested.getT1Optional() == nothing);
		Asserts.that(nested.getT2Optional() == nothing);
	}

	@Test
	~[ test get otherwise in methods ]~ (Asserts) {
		Asserts.that(numText.getT1Otherwise(5) == 5);
		Asserts.that(numText.getT2Otherwise("hello") == "hello");
		Asserts.that(textNum.getT1Otherwise("hello") == "hello");
		Asserts.that(textNum.getT2Otherwise(5) == 5);
		Asserts.that(nested.getT1Otherwise(numText) == numText);
		Asserts.that(nested.getT2Otherwise(textNum) == textNum);
	}

	@Test
	~[ test set and then get in methods ]~ (Asserts) {
		numText.setT1(4); numText.setT2("hi");
		textNum.setT1("hey"); textNum.setT2(6);
		nested.setT1(numText); nested.setT2(textNum);
		Asserts.that(numText.getT1Optional() == 4);
		Asserts.that(numText.getT2Optional() == "hi");
		Asserts.that(textNum.getT1Optional() == "hey");
		Asserts.that(textNum.getT2Optional() == 6);
		Asserts.that(nested.getT1Optional() == numText);
		Asserts.that(nested.getT2Optional() == textNum);
	}

	@Test
	~[ test set and then get in properties ]~ (Asserts) {
		numText.setT1(4); numText.setT2("hi");
		textNum.setT1("hey"); textNum.setT2(6);
		nested.setT1(numText); nested.setT2(textNum);
		Asserts.that(numText.Num == 4);
		Asserts.that(numText.Text == "hi");
		Asserts.that(textNum.Text == "hey");
		Asserts.that(textNum.Num == 6);
		//Asserts.that(nested.getT1Optional() == numText); -- these conflict...
		//Asserts.that(nested.getT2Optional() == textNum);
	}

	@Test
	~[ test unset and then all is nothing ]~ (Asserts) {
		numText.unsetT1();
		Asserts.that(numText.getT1Optional() == nothing);
		numText.unsetT2();
		Asserts.that(numText.getT2Optional() == nothing);
		textNum.unsetT1();
		Asserts.that(textNum.getT1Optional() == nothing);
		textNum.unsetT2();
		Asserts.that(textNum.getT2Optional() == nothing);
		nested.unsetT1();
		Asserts.that(nested.getT1Optional() == nothing);
		nested.unsetT2();
		Asserts.that(nested.getT2Optional() == nothing);
	}

	#>
	~[ test all start out as nothing in properties]~ (Asserts) {
		Asserts.that(numText.getT1Optional() == nothing);
		Asserts.that(numText.getT2Optional() == nothing);
		Asserts.that(textNum.getT1Optional() == nothing);
		Asserts.that(textNum.getT2Optional() == nothing);
		Asserts.that(nested.getT1Optional() == nothing);
		Asserts.that(nested.getT2Optional() == nothing);
	}
	##
