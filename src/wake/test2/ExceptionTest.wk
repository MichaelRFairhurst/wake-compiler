#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# ExceptionTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;
import std.UndefinedIndexException;

@TestClass
every ExceptionTest is:

	provides Exception, SubExceptionA, SubExceptionB, SubSubExceptionA;

	@Test
	~[ test exception not thrown never hits catch block ]~(Asserts) {
		try {
			// do some stuff here
			Asserts.that(5)Equals(5);
			Asserts.that(5)Equals(5);
			Asserts.that(5)Equals(5);
			Asserts.that(5)Equals(5);
		} catch(Exception) {
			Asserts.fail("Should not have reached here!");
		}
	}

	@Test
	~[ test exception thrown stops executing try block ]~(Asserts) {
		try {
			// do some stuff here
			Asserts.that(5)Equals(5);
			Asserts.that(5)Equals(5);
			Asserts.that(5)Equals(5);
			Asserts.that(5)Equals(5);
			throw Exception from this;
			Asserts.fail("should not have reached here!");
		} catch(Exception) {
		}
	}

	@Test
	~[ test exception thrown executes catch block ]~(Asserts) {
		try {
			throw Exception from this;
		} catch(Exception) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	functionThatThrows() {
		throw Exception from this;
	}

	@Test
	~[ test exception thrown from function is caught ]~(Asserts) {
		try {
			functionThatThrows();
		} catch(Exception) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubExceptionA is caught as exception ]~(Asserts) {
		try {
			throw SubExceptionA from this;
		} catch(Exception) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubExceptionB is caught as exception ]~(Asserts) {
		try {
			throw SubExceptionB from this;
		} catch(Exception) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubSubExceptionA is caught as exception ]~(Asserts) {
		return; // BROKEN
		try {
			throw SubSubExceptionA from this;
		} catch(Exception) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubExceptionA is caught as SubExceptionA ]~(Asserts) {
		try {
			throw SubExceptionA from this;
		} catch(SubExceptionA) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubExceptionB is caught as SubExceptionB ]~(Asserts) {
		try {
			throw SubExceptionB from this;
		} catch(SubExceptionB) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubSubExceptionA is caught as SubExceptionA ]~(Asserts) {
		try {
			throw SubSubExceptionA from this;
		} catch(SubExceptionA) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubSubExceptionA is caught as SubSubExceptionA ]~(Asserts) {
		try {
			throw SubSubExceptionA from this;
		} catch(SubSubExceptionA) {
			return;
		}
		Asserts.fail("Should not have reached here!");
	}

	@Test
	~[ test SubExceptionA is not caught as SubExceptionB ]~(Asserts) {
		try {
			try {
				throw SubExceptionA from this;
			} catch(SubExceptionB) {
				Asserts.fail("Should not have reached here!");
			}
		} catch(SubExceptionA) {}
	}

	@Test
	~[ test SubExceptionB is not caught as SubExceptionA ]~(Asserts) {
		try {
			try {
				throw SubExceptionB from this;
			} catch(SubExceptionA) {
				Asserts.fail("Should not have reached here!");
			}
		} catch(SubExceptionB) {}
	}

	@Test
	~[ test SubExceptionA is not caught as SubSubExceptionA ]~(Asserts) {
		try {
			try {
				throw SubExceptionA from this;
			} catch(SubSubExceptionA) {
				Asserts.fail("Should not have reached here!");
			}
		} catch(SubExceptionA) {}
	}

	@Test
	~[ test exception stack trace ]~(Asserts) {
		try {
			throw Exception from this;
		} catch(Exception) {
			var Text[] = Exception.getStacktrace().split("\n");
			Asserts.that(Text[1].substr(0, 69))Equals("    at [WAKE] ExceptionTest.~[ test exception stack trace ]~(Asserts)");
		}
	}

	recurseTilThrow(Exception, Num) {
		if(Num) {
			recurseTilThrow(Exception, Num - 1);
		} else {
			throw Exception;
		}
	}

	@Test
	~[ test exception stack is replaced on each line ]~(Asserts) {
		try {
			recurseTilThrow(Exception from this, 1);
		} catch(Exception) {
			var Text[] = Exception.getStacktrace().split("\n");
			Asserts.that(Text[1].substr(0, 58))Equals("    at [WAKE] ExceptionTest.recurseTilThrow(Exception,Num)");
			Asserts.that(Text[2].substr(0, 58))Equals("    at [WAKE] ExceptionTest.recurseTilThrow(Exception,Num)");
		}
	}

	@Test
	~[ test undefined index exception ]~(Asserts) {
		var $Text[] = [];
		try {
			$Text[0].getSize();
		} catch(UndefinedIndexException) {
			var Text[] = UndefinedIndexException.getStacktrace().split("\n");
			Asserts.that(Text[0])Equals("Accessing undefined index 0 of a list");
			Asserts.that(Text[2].substr(0, 73))Equals("    at [WAKE] ExceptionTest.~[ test undefined index exception ]~(Asserts)");
		}
	}

	@Test
	~[ test undefined index exception with gap ]~(Asserts) {
		var $Text[] = [];
		$Text[1] = "hello";
		$Text[1].getSize(); // better not throw!
		try {
			$Text[0].getSize();
		} catch(UndefinedIndexException) {
			var Text[] = UndefinedIndexException.getStacktrace().split("\n");
			Asserts.that(Text[0])Equals("Accessing undefined index 0 of a list");
			Asserts.that(Text[2].substr(0, 82))Equals("    at [WAKE] ExceptionTest.~[ test undefined index exception with gap ]~(Asserts)");
		}
	}

	@Test
	~[ test no undefined index exception with optional ]~(Asserts) {
		var $Text?[] = [nothing];
		$Text[0];
	}

every SubExceptionA (an Exception) is:

every SubExceptionB (an Exception) is:

every SubSubExceptionA (a SubExceptionA) is:
