#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# AutoboxingTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;

@TestClass
every AutoboxingTest is:

	@Test
	testNumSquared(Asserts) {
		Asserts.that(5.squared())Equals(25);
	}

	@Test
	testAbsoluteValue(Asserts) {
		Asserts.that(5.abs())Equals(5);
		Asserts.that(0.abs())Equals(0);
		Asserts.that(-3.abs())Equals(3);
		// TODO...NEGATIVES
	}

	@Test
	testMaxOfNum(Asserts) {
		Asserts.that(5.orMaxOf(5))Equals(5);
		Asserts.that(5.orMaxOf(4))Equals(5);
		Asserts.that(5.orMaxOf(6))Equals(6);
	}

	@Test
	testMaxOfNums(Asserts) {
		var Num[] = [5];
		Asserts.that(5.orMaxOf(Num[]))Equals(5);
		Num[] = [5, 4];
		Asserts.that(5.orMaxOf(Num[]))Equals(5);
		Num[] = [5, 4, 6];
		Asserts.that(5.orMaxOf(Num[]))Equals(6);
	}

	@Test
	testMinOfNum(Asserts) {
		Asserts.that(5.orMinOf(5))Equals(5);
		Asserts.that(5.orMinOf(4))Equals(4);
		Asserts.that(5.orMinOf(6))Equals(5);
	}

	@Test
	testMinOfNums(Asserts) {
		var Num[] = [5];
		Asserts.that(5.orMinOf(Num[]))Equals(5);
		Num[] = [5, 4];
		Asserts.that(5.orMinOf(Num[]))Equals(4);
		Num[] = [5, 4, 6];
		Asserts.that(5.orMinOf(Num[]))Equals(4);
	}

	@Test
	testNumberOfDigits(Asserts) {
		Asserts.that(123.numberOfDigits())Equals(3);
		Asserts.that(1234.numberOfDigits())Equals(4);
		Asserts.that(12.numberOfDigits())Equals(2);
		Asserts.that(1.numberOfDigits())Equals(1);
		Asserts.that(0.numberOfDigits())Equals(1);
	}

	@Test
	testToUpper(Asserts) {
		Asserts.that("blah".toUpper())Equals("BLAH");
	}

	@Test
	testToLower(Asserts) {
		Asserts.that("BLAH".toLower())Equals("blah");
	}

	@Test
	testSwitchCase(Asserts) {
		Asserts.that("BlAh".switchCase())Equals("bLaH");
	}

	@Test
	testTrim(Asserts) {
		Asserts.that("    	 blah".trim())Equals("blah");
		Asserts.that(" blah".trim())Equals("blah");
		Asserts.that("blah ".trim())Equals("blah");
		Asserts.that("blah 		".trim())Equals("blah");
		Asserts.that(" blah ".trim())Equals("blah");
		Asserts.that("  	 blah 		 ".trim())Equals("blah");
		Asserts.that("blah".trim())Equals("blah");
		Asserts.that(" blah blah ".trim())Equals("blah blah");
		Asserts.that("blah blah".trim())Equals("blah blah");
	}

	@Test
	testArraySize(Asserts) {
		var Num[] = [];
		Asserts.that(Num[].getSize())Equals(0);
		Num[] = [1];
		Asserts.that(Num[].getSize())Equals(1);
		Num[] = [1, 1];
		Asserts.that(Num[].getSize())Equals(2);
	}

	@Test
	testArrayContains(Asserts) {
		var Num[] = [];
		var Text[] = [];
		var AutoboxingTest[] = [];
		Asserts.isFalse(Num[].contains(5));
		Asserts.isFalse(Text[].contains("test"));
		Asserts.isFalse(AutoboxingTest[].contains(this));
		Num[] = [4];
		Text[] = ["hey"];
		Asserts.isFalse(Num[].contains(5));
		Asserts.isFalse(Text[].contains("test"));
		Asserts.isFalse(AutoboxingTest[].contains(this));
		Num[] = [4, 5];
		Text[] = ["hey", "test"];
		AutoboxingTest[] = [this];
		Asserts.isTrue(Num[].contains(5));
		Asserts.isTrue(Text[].contains("test"));
		Asserts.isTrue(AutoboxingTest[].contains(this));
	}

	@Test
	testTextLength(Asserts) {
		Asserts.that("hello".getSize())Equals(5);
		Asserts.that("h".getSize())Equals(1);
		Asserts.that("".getSize())Equals(0);
		Asserts.that("suuuuuuuuuuuuuuuuuupa coooooooooooooooooool".getSize())Equals(43);
	}

	@Test
	testTextSubstr(Asserts) {
		Asserts.that("hello".substr(0))Equals("hello");
		Asserts.that("hello".substr(0, 10))Equals("hello");
		Asserts.that("hello".substr(1))Equals("ello");
		Asserts.that("hello".substr(1, 10))Equals("ello");
		Asserts.that("hello".substr(1, 3))Equals("el");
	}

	@Test
	testNumToString(Asserts) {
		Asserts.that(5.toString())Equals("5");
		Asserts.that(0.toString())Equals("0");
		Asserts.that(2020.toString())Equals("2020");
		Asserts.that(-2020.toString())Equals("-2020");
	}

	@Test
	testBoolToString(Asserts) {
		Asserts.that(true.toString())Equals("true");
		Asserts.that(false.toString())Equals("false");
	}

	@Test
	testFloor(Asserts) {
		Asserts.that(5.5.floor())Equals(5);
		Asserts.that(5.1.floor())Equals(5);
		Asserts.that(5.9.floor())Equals(5);
		Asserts.that(5.0.floor())Equals(5);
		Asserts.that((0 - 5).floor())Equals(-5);
		Asserts.that((0 - 5.1).floor())Equals(-6);
		Asserts.that((0 - 5.5).floor())Equals(-6);
		Asserts.that((0 - 5.9).floor())Equals(-6);
	}

	@Test
	testCeil(Asserts) {
		Asserts.that(5.5.ceil())Equals(6);
		Asserts.that(5.1.ceil())Equals(6);
		Asserts.that(5.9.ceil())Equals(6);
		Asserts.that(5.0.ceil())Equals(5);
		Asserts.that(-5.ceil())Equals(-5);
		Asserts.that(-5.1.ceil())Equals(-5);
		Asserts.that(-5.5.ceil())Equals(-5);
		Asserts.that(-5.9.ceil())Equals(-5);
	}

	@Test
	testRound(Asserts) {
		Asserts.that(5.5.round())Equals(6);
		Asserts.that(5.51.round())Equals(6);
		Asserts.that(5.1.round())Equals(5);
		Asserts.that(5.9.round())Equals(6);
		Asserts.that(5.0.round())Equals(5);
		Asserts.that(-5.round())Equals(-5);
		Asserts.that(-5.1.round())Equals(-5);
		Asserts.that(-5.5.round())Equals(-5);
		Asserts.that(-5.51.round())Equals(-6);
		Asserts.that(-5.9.round())Equals(-6);
	}

	@Test
	testModulo(Asserts) {
		Asserts.that(5.modulo(2))Equals(1);
		Asserts.that(10.modulo(2))Equals(0);
		Asserts.that(10.modulo(3))Equals(1);
		Asserts.that(11.modulo(3))Equals(2);
		Asserts.that(12.modulo(3))Equals(0);
	}

	@Test
	testParseNum(Asserts) {
		it(Asserts)That("5".parseNum())ExistsAndEquals(5);
		it(Asserts)That("54".parseNum())ExistsAndEquals(54);
		it(Asserts)That("54.5".parseNum())ExistsAndEquals(54.5);
		it(Asserts)That("-54.5".parseNum())ExistsAndEquals(-54.5);
		var Num? = "-5o".parseNum();
		if Num exists {
			Asserts.fail("-5o should not have parsed.");
		}
	}

	it(Asserts)That(Num?)ExistsAndEquals($Num) {
		if Num exists {
			Asserts.that(Num)Equals($Num);
		} else {
			Asserts.fail("Num should have equaled " + $Num.toString() + ", but didn't exist.");
		}
	}

	it(Asserts)That(Text?)ExistsAndEquals($Text) {
		if Text exists {
			Asserts.that(Text)Equals($Text);
		} else {
			Asserts.fail("Text should have equaled" + $Text + ", but didn't exist.");
		}
	}

	@Test
	testCharAt(Asserts) {
		it(Asserts)That("aoeu".charAt(0))ExistsAndEquals("a");
		it(Asserts)That("aoeu".charAt(1))ExistsAndEquals("o");
		it(Asserts)That("aoeu".charAt(2))ExistsAndEquals("e");
		it(Asserts)That("aoeu".charAt(3))ExistsAndEquals("u");
		var Text? = "aoeu".charAt(4);
		if Text exists {
			Asserts.fail('"aoeu".charAt(4) shouldn\'t exist');
		}
	}

	@Test
	testSplit(Asserts) {
		Asserts.that("hello heyo".split(" ").getSize())Equals(2);
		Asserts.that("hello heyo".split(" ")[0])Equals("hello");
		Asserts.that("hello heyo".split(" ")[1])Equals("heyo");
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air").getSize())Equals(6);
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air")[0])Equals("f");
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air")[1])Equals(" h");
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air")[2])Equals(" bl");
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air")[3])Equals(" snare tear l");
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air")[4])Equals(" mare d");
		Asserts.that("fair hair blair snare tear lair mare dairy".split("air")[5])Equals("y");
		Asserts.that("hey man whatchoo doin".split("x").getSize())Equals(1);
		Asserts.that("hey man whatchoo doin".split("x")[0])Equals("hey man whatchoo doin");
	}

	@Test
	testIndexOf(Asserts) {
		it(Asserts)That("aoeu".indexOf("a"))ExistsAndEquals(0);
		it(Asserts)That("aoeu".indexOf("ao"))ExistsAndEquals(0);
		it(Asserts)That("aoeu".indexOf("aoe"))ExistsAndEquals(0);
		it(Asserts)That("aoeu".indexOf("aoeu"))ExistsAndEquals(0);
		it(Asserts)That("aoeu".indexOf("o"))ExistsAndEquals(1);
		it(Asserts)That("aoeu".indexOf("oe"))ExistsAndEquals(1);
		it(Asserts)That("aoeu".indexOf("oeu"))ExistsAndEquals(1);
		it(Asserts)That("aoeu".indexOf("e"))ExistsAndEquals(2);
		it(Asserts)That("aoeu".indexOf("eu"))ExistsAndEquals(2);
		it(Asserts)That("aoeu".indexOf("u"))ExistsAndEquals(3);
		var Num? = "aoeu".indexOf("i");
		if Num exists {
			Asserts.fail('"aoeu".indexOf("i") shouldn\'t exist');
		}
		Num = "aoeu".indexOf("aoi");
		if Num exists {
			Asserts.fail('"aoeu".indexOf("aoi") shouldn\'t exist');
		}
	}

	@Test
	~[ test List.push(T) ]~(Asserts) {
		var Text[] = [];
		Text[].push("hey");
		Asserts.that(Text[].getSize())Equals(1);
		Asserts.that(Text[0])Equals("hey");
	}

	@Test
	~[ test Join ]~(Asserts) {
		var Text[] = ['hey'];
		Asserts.that(''.join(Text[]))Equals('hey');
		Asserts.that(','.join(Text[]))Equals('hey');
		Text[] = ['hey', 'hey'];
		Asserts.that(''.join(Text[]))Equals('heyhey');
		Asserts.that(','.join(Text[]))Equals('hey,hey');
		Text[] = ['hey', 'hey', 'boo'];
		Asserts.that(''.join(Text[]))Equals('heyheyboo');
		Asserts.that(','.join(Text[]))Equals('hey,hey,boo');
		Asserts.that(', '.join(Text[]))Equals('hey, hey, boo');
	}
