#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# LambdaTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;

@TestClass
every LambdaTest is:

	@Test
	~[test declared lambdas are not invoked ]~(Asserts) {
		{ Text ->
			Asserts.fail("Did not expect to run lambda with arg " + Text);
		};
	}

	@Test
	~[test self invoking lambda runs ]~(Asserts) {
		var Bool ran = false;
		({ ->
			ran = true;
		})();

		Asserts.that(ran)Equals(true);
	}

	@Test
	~[test declared lambda runs ]~(Asserts) {
		var Bool ran = false;
		var fn() lambda = { ->
			ran = true;
		};
		lambda();

		Asserts.that(ran)Equals(true);
	}

	@Test
	~[test run lambda with args ]~(Asserts) {
		var Bool ran = false;

		({ Bool ->
			Asserts.that(Bool)Equals(true);
		})(true);

		({ Bool ->
			Asserts.that(Bool)Equals(false);
		})(false);

		({ Text ->
			Asserts.that(Text)Equals('hey');
		})('hey');

		({ Text, $Text ->
			Asserts.that(Text)Equals($Text);
		})('hey', 'hey');
	}

	with Bool lambdaFunctionRan = false;
	methodNotesLambdaRan() {
		lambdaFunctionRan = true;
	}

	@Test
	~[test call function within lambda ]~(Asserts) {
		lambdaFunctionRan = false;
		({ ->
			methodNotesLambdaRan();
		})();
		Asserts.that(lambdaFunctionRan)Equals(true);
	}

	@Test
	~[test use property within lambda ]~(Asserts) {
		lambdaFunctionRan = false;
		({ ->
			lambdaFunctionRan = true;
		})();
		Asserts.that(lambdaFunctionRan)Equals(true);
	}

	@Test
	~[test lambda return value ]~(Asserts) {
		Asserts.that(({ -> return true; })())Equals(true);
		Asserts.that(({ Bool -> return Bool; })(true))Equals(true);
		Asserts.that(({ -> return false; })())Equals(false);
		Asserts.that(({ Bool -> return Bool; })(false))Equals(false);
	}

	call(some fn()) {
		some();
	}

	~[test method is called in other function]~(Asserts) {
		var Bool = false;
		call({ -> Bool = true; });
		Asserts.that(Bool)Equals(true);
	}

	@Test
	~[test list.filter]~(Asserts) {
		Asserts.that(["hey", "hey", "man"].filter({ t => true }).getSize())Equals(3);
		Asserts.that(["hey", "hey", "man"].filter({ t => false }).getSize())Equals(0);
		Asserts.that(["hey", "hello", "man"].filter({ t => t == "hey" }).getSize())Equals(1);
		Asserts.that(["hey", "hello", "man"].filter({ t => t == "hey" })[0])Equals("hey");
		Asserts.that(["hey", "hello", "man"].filter({ t => t != "hey" }).getSize())Equals(2);
		Asserts.that(["hey", "hello", "man"].filter({ t => t != "hey" })[0])Equals("hello");
		Asserts.that(["hey", "hello", "man"].filter({ t => t != "hey" })[1])Equals("man");
	}

	@Test
	~[test list.any]~(Asserts) {
		var runtimes Num = 0;
		Asserts.that(["hey", "hey", "man"].any({ t -> runtimes += 1; return true; }))Equals(true);
		Asserts.that(runtimes)Equals(1);
		Asserts.that(["hey", "hey", "man"].any({ t -> runtimes += 1; return false; }))Equals(false);
		Asserts.that(runtimes)Equals(4);
		Asserts.that(["man", "hello", "hey"].any({ t -> runtimes += 1; return t == "hey"; }))Equals(true);
		Asserts.that(runtimes)Equals(5);
		Asserts.that(["man", "hello", "hey"].any({ t -> runtimes += 1; return t != "hey"; }))Equals(true);
		Asserts.that(runtimes)Equals(7);
		Asserts.that(["hello", "hello", "man"].any({ t -> runtimes += 1; return t == "hey"; }))Equals(false);
		Asserts.that(runtimes)Equals(10);
	}

	@Test
	~[test list.sort]~(Asserts) {
		var Text[] = ["zap", "goop", "pickle", "aardvark"];

		Text[].sort({ a, b => 1 if a.getSize() < b.getSize() else -1 });
		Asserts.that(Text[].getSize())Equals(4);
		Asserts.that(Text[0])Equals("aardvark");
		Asserts.that(Text[1])Equals("pickle");
		Asserts.that(Text[2])Equals("goop");
		Asserts.that(Text[3])Equals("zap");

		Text[].sort({ a, b => 1 if a.getSize() > b.getSize() else -1 });
		Asserts.that(Text[].getSize())Equals(4);
		Asserts.that(Text[3])Equals("aardvark");
		Asserts.that(Text[2])Equals("pickle");
		Asserts.that(Text[1])Equals("goop");
		Asserts.that(Text[0])Equals("zap");

		Text[].sort({ a, b => 0 });
		Asserts.that(Text[].getSize())Equals(4);
		Asserts.that(Text[3])Equals("aardvark");
		Asserts.that(Text[2])Equals("pickle");
		Asserts.that(Text[1])Equals("goop");
		Asserts.that(Text[0])Equals("zap");
	}

	@Test
	~[test list.map]~(Asserts) {
		var Text[] = ["blah", "happy", "blappy"];

		var Text[] res = Text[].map({ t => t.toUpper() });
		var Num[] = Text[].map({ t => t.getSize() });

		Asserts.that(res.getSize())Equals(3);
		Asserts.that(res[0])Equals("BLAH");
		Asserts.that(res[1])Equals("HAPPY");
		Asserts.that(res[2])Equals("BLAPPY");

		Asserts.that(Num[].getSize())Equals(3);
		Asserts.that(Num[0])Equals(4);
		Asserts.that(Num[1])Equals(5);
		Asserts.that(Num[2])Equals(6);
	}

	@Test
	~[test list.reduce]~(Asserts) {
		var Num[] = [1, 2, 3];

		Asserts.that(Num[].reduce({ n, acc => acc + n }))Equals(6);
		Asserts.that(Num[].reduce({ n, acc => acc - n }))Equals(-4);
		Asserts.that(Num[].reduce({ n, acc => (acc + 1) * n }))Equals(15);
	}

	@Test
	~[test list.foldr and foldl]~(Asserts) {
		var Num[] = [1, 2, 3];

		Asserts.that(Num[].foldr({ n, acc => acc + n.toString() }, ""))Equals("123");
		Asserts.that(Num[].foldl({ n, acc => acc + n.toString() }, ""))Equals("321");
		Asserts.that(Num[].foldr({ n, acc => acc + n.toString() }, "start"))Equals("start123");
		Asserts.that(Num[].foldl({ n, acc => acc + n.toString() }, "start"))Equals("start321");
	}

	@Test
	~[test automatic lambda returns]~(Asserts) {

		Asserts.that(({ => 5 })())Equals(5);
		Asserts.that(({ => 6; })())Equals(6);
		Asserts.that(({ Num => Num })(7))Equals(7);
		Asserts.that(({ Num => Num; })(8))Equals(8);
	}
