#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# MathTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;

@TestClass
every MathTest is:

	@Test
	testAddition(Asserts) {
		Asserts.that(2 + 2)Equals(4);
		Asserts.that(6 + 2)Equals(8);
		Asserts.that(60000 + 20000)Equals(80000);
		Asserts.that(- 20 + 14)Equals(- 6);
	}

	@Test
	testSubtraction(Asserts) {
		Asserts.that(6 - 2)Equals(4);
		Asserts.that(42 - 2)Equals(40);
		Asserts.that(40 - 80)Equals(- 40);
	}

	@Test
	testDivision(Asserts) {
		Asserts.that(8 / 4)Equals(2);
		Asserts.that(10 / 4)Equals(2.5);
		Asserts.that(10 / 20)Equals(0.5);
	}

	@Test
	testMultiplication(Asserts) {
		Asserts.that(3 * 5)Equals(15);
		Asserts.that(8 * 16)Equals(128);
		Asserts.that(8 * 1)Equals(8);
		Asserts.that(8 * 0.5)Equals(4);
	}
	
	@Test
	testMod(Asserts) {
		Asserts.that(23 % 98)Equals(23);
		Asserts.that(117 % -72)Equals(-27);
		Asserts.that(-74 % 49)Equals(24);
		Asserts.that(-20 % -6)Equals(-2);
	}
		
	@Test
	testModNative(Asserts) {
		Asserts.that(23 %% 98)Equals(23);
		Asserts.isTrue((117 %% -72 == -27) || (117 %% -72 == 45));
		Asserts.isTrue((-74 %% 49 == -24) || (-74 %% 49 == -25));
		Asserts.that(-20 %% -6)Equals(-2);
	}
	
	@Test
	testModAlt(Asserts) {
		Asserts.that(23 %% 98)Equals(23);
		Asserts.that(117 %% -72)Equals(45);
		Asserts.that(-74 %% 49)Equals(-25);
		Asserts.that(-20 %% -6)Equals(-2);
	}

	@Test
	testOrderOfOperations(Asserts) {
		Asserts.that(5 + 6 * 2)Equals(17);
		Asserts.that(5 - 6 * 2)Equals(0 - 7);
		Asserts.that(5 + 6 / 2)Equals(8);
		Asserts.that(5 - 6 / 2)Equals(2);
		Asserts.that(6 * 2 + 5)Equals(17);
		Asserts.that(6 * 2 - 5)Equals(7);
		Asserts.that(6 / 2 + 5)Equals(8);
		Asserts.that(6 / 2 - 5)Equals(0 - 2);
	}

	@Test
	testNegation(Asserts) {
		var Num a = 3;
		var Num b = 2;
		Asserts.that(-a - -b)Equals(-1);
		Asserts.that(a - -b)Equals(5);
		Asserts.that(a + -b)Equals(1);
		Asserts.that(-a + b)Equals(-1);
		Asserts.that(-a - b)Equals(-5);
		Asserts.that(-a * -b)Equals(6);
		Asserts.that(a * -b)Equals(-6);
		Asserts.that(-a * b)Equals(-6);
	}

	@Test
	testDecimals(Asserts) {
		Asserts.that(.3)Equals(0.3);
		Asserts.that(.4)Equals(0.4);
		Asserts.that(.0)Equals(0.0);
		Asserts.that(.555)Equals(0.555);
	}
